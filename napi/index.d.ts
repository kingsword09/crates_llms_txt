/* auto-generated by NAPI-RS */
/* eslint-disable */
/**
 * Generate documentation for a crate using local mode with all features enabled
 *
 * @param manifestPath - Path to the Cargo.toml file of the crate
 * @param toolchain - The Rust toolchain to use (e.g. "stable", "nightly")
 * @returns LLMsConfig | null - The generated documentation configuration or null if failed
 *
 * @example
 * ```typescript
 * const config = fromLocal("./Cargo.toml", "stable");
 * if (config) {
 *   console.log(`Generated docs for ${config.libName}`);
 * }
 * ```
 */
export declare function fromLocal(manifestPath: string, toolchain?: string | undefined | null): LlMsConfig | null

/**
 * Generate documentation for a crate using local mode with specified features enabled
 *
 * @param manifestPath - Path to the Cargo.toml file of the crate
 * @param noDefaultFeatures - Whether to disable the default features
 * @param features - List of features to enable
 * @param toolchain - The Rust toolchain to use (e.g. "stable", "nightly")
 * @returns LLMsConfig | null - The generated documentation configuration or null if failed
 *
 * @example
 * ```typescript
 * const config = fromLocalWithFeatures("./Cargo.toml", false, ["async"], "stable");
 * if (config) {
 *   console.log(`Generated docs for ${config.libName} with features`);
 * }
 * ```
 */
export declare function fromLocalWithFeatures(manifestPath: string, noDefaultFeatures: boolean, features?: Array<string> | undefined | null, toolchain?: string | undefined | null): LlMsConfig | null

/**
 * Fetch crate documentation from online docs.rs
 *
 * @param libName - The name of the crate
 * @param version - The version of the crate (optional)
 * @returns Promise<LLMsConfig | null> - The generated documentation configuration or null if failed
 *
 * @example
 * ```typescript
 * const config = await fromOnline("clap", "4.5.39");
 * if (config) {
 *   console.log(`Fetched docs for ${config.libName} v${config.version}`);
 * }
 * ```
 *
 */
export declare function fromOnline(libName: string, version?: string | undefined | null): Promise<LlMsConfig | null>

/**
 * Fetch crate documentation from a specific URL
 *
 * @param url - The URL of the documentation JSON
 * @returns Promise<LLMsConfig | null> - The generated documentation configuration or null if failed
 *
 * @example
 * ```typescript
 * const config = await fromUrl("https://docs.rs/crate/clap/latest/json");
 * if (config) {
 *   console.log(`Fetched docs from URL: ${config.libName}`);
 * }
 * ```
 *
 */
export declare function fromUrl(url: string): Promise<LlMsConfig | null>

export interface FullSessionItem {
  content: string
  link: string
}

/**
 * Get llms config by rustdoc with either all features or specific features
 *
 * @param params - Either a LLMsConfigRustdocByAllFeatures or LLMsConfigRustdocByFeatures object containing:
 *   - For all features: toolchain and manifestPath
 *   - For specific features: toolchain, manifestPath, noDefaultFeatures flag, and optional features list
 * @returns LLMsConfig | null - The generated documentation configuration or null if failed
 *
 * @example
 * ```typescript
 * // With all features
 * const configAllFeatures = getLlmsConfigByRustdoc({
 *   toolchain: "stable",
 *   manifestPath: "./Cargo.toml"
 * });
 *
 * // With specific features
 * const configWithFeatures = getLlmsConfigByRustdoc({
 *   toolchain: "stable",
 *   manifestPath: "./Cargo.toml",
 *   noDefaultFeatures: false,
 *   features: ["async"]
 * });
 * ```
 */
export declare function getLlmsConfigByRustdoc(params: LlMsConfigRustdocByAllFeatures | LlMsConfigRustdocByFeatures): LlMsConfig | null

/**
 * Get llms config by rustdoc all features (alias for fromLocal)
 *
 * @param manifestPath - Path to the Cargo.toml file of the crate
 * @param toolchain - The Rust toolchain to use (e.g. "stable", "nightly")
 * @returns LLMsConfig | null - The generated documentation configuration or null if failed
 * @deprecated Use fromLocal instead
 */
export declare function getLlmsConfigByRustdocAllFeatures(manifestPath: string, toolchain?: string | undefined | null): LlMsConfig | null

/**
 * Get llms config by rustdoc features (alias for fromLocalWithFeatures)
 *
 * @param manifestPath - Path to the Cargo.toml file of the crate
 * @param noDefaultFeatures - Whether to disable the default features
 * @param features - List of features to enable
 * @param toolchain - The Rust toolchain to use (e.g. "stable", "nightly")
 * @returns LLMsConfig | null - The generated documentation configuration or null if failed
 * @deprecated Use fromLocalWithFeatures instead
 */
export declare function getLlmsConfigByRustdocFeatures(manifestPath: string, noDefaultFeatures: boolean, features?: Array<string> | undefined | null, toolchain?: string | undefined | null): LlMsConfig | null

/**
 * Get llms config online by either crate name or URL
 *
 * @param params - Either a LLMsConfigByCrate or LLMsConfigByUrl object containing:
 *   - For crate: libName and optional version
 *   - For URL: url string
 * @returns Promise<LLMsConfig | null> - The generated documentation configuration or null if failed
 *
 * @example
 * ```typescript
 * // By crate name
 * const configByCrate = await getLlmsConfigOnline({
 *   libName: "clap",
 *   version: "4.5.39"
 * });
 *
 * // By URL
 * const configByUrl = await getLlmsConfigOnline({
 *   url: "https://docs.rs/crate/clap/latest/json"
 * });
 * ```
 */
export declare function getLlmsConfigOnline(params: LlMsConfigByCrate | LlMsConfigByUrl): Promise<LlMsConfig | null>

/**
 * Get llms config online by crates name (alias for fromOnline)
 *
 * @param libName - The name of the crate
 * @param version - The version of the crate (optional)
 * @returns Promise<LLMsConfig | null> - The generated documentation configuration or null if failed
 * @deprecated Use fromOnline instead
 */
export declare function getLlmsConfigOnlineByCratesName(libName: string, version?: string | undefined | null): Promise<LlMsConfig | null>

/**
 * Get llms config by online by url (alias for fromUrl)
 *
 * @param url - The URL of the documentation JSON
 * @returns Promise<LLMsConfig | null> - The generated documentation configuration or null if failed
 * @deprecated Use fromUrl instead
 */
export declare function getLlmsConfigOnlineByUrl(url: string): Promise<LlMsConfig | null>

export interface LlMsConfig {
  libName: string
  version: string
  sessions: Array<SessionItem>
  fullSessions: Array<FullSessionItem>
}

export interface LlMsConfigByCrate {
  libName: string
  version?: string
}

export interface LlMsConfigByUrl {
  url: string
}

export interface LlMsConfigRustdocByAllFeatures {
  toolchain?: string
  manifestPath: string
}

export interface LlMsConfigRustdocByFeatures {
  toolchain?: string
  manifestPath: string
  noDefaultFeatures: boolean
  features?: Array<string>
}

export interface SessionItem {
  title: string
  description: string
  link: string
}
